cdfa {
    start
        ' ' | '\t' | '\n' | '\r' -> ^_
        ',' -> ^COMMA
        ':' -> ^COLON
        '{' -> ^LBRACKET
        '}' -> ^RBRACKET
        '[' -> ^LARRI
        ']' -> ^RARRI
        '"' -> string
        '0' .. '9' -> int
        '-' -> minus
        'true' | 'false' | 'null' -> ^LITERAL;

    string
        '"' -> ^STRING
        '\\' -> string_esc
        _ -> string;
    string_esc
        _ -> string;

    minus
        '0' .. '9' -> int;

    int ^NUMBER
        '0' .. '9' | '.' -> int
        'E' | 'e' -> int_exp;

    int_exp
        '+' | '-' | '0' .. '9' -> int;
}

grammar {
    json
        | element `{;indent=    }\n`;

    value
        | object
        | array
        | STRING
        | NUMBER
        | LITERAL;

    object
        | LBRACKET RBRACKET
        | LBRACKET members RBRACKET `{}\n{;prefix=[prefix][indent]}\n[prefix]{}`;

    members
        | member
        | member {member_lem};
    member_lem
        | COMMA member `{}\n{}`;
    member
        | STRING COLON element `[prefix]{}{} {}`;

    array
        | LARRI [elements] RARRI;

    elements
        | element
        | element {element_lem};
    element_lem
        | COMMA element `{} {}`;
    element
        | value;
}
